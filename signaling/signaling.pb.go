// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: signaling.proto

package signaling

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*ClientMessage_Register
	//	*ClientMessage_Result
	//	*ClientMessage_Heartbeat
	Content       isClientMessage_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	mi := &file_signaling_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMessage) GetContent() isClientMessage_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ClientMessage) GetRegister() *ClientRegister {
	if x != nil {
		if x, ok := x.Content.(*ClientMessage_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *ClientMessage) GetResult() *CommandResult {
	if x != nil {
		if x, ok := x.Content.(*ClientMessage_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *ClientMessage) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.Content.(*ClientMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

type isClientMessage_Content interface {
	isClientMessage_Content()
}

type ClientMessage_Register struct {
	Register *ClientRegister `protobuf:"bytes,1,opt,name=register,proto3,oneof"` // 客户端注册
}

type ClientMessage_Result struct {
	Result *CommandResult `protobuf:"bytes,2,opt,name=result,proto3,oneof"` // 命令执行结果
}

type ClientMessage_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"` // 心跳包
}

func (*ClientMessage_Register) isClientMessage_Content() {}

func (*ClientMessage_Result) isClientMessage_Content() {}

func (*ClientMessage_Heartbeat) isClientMessage_Content() {}

type ServerCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgID         int64                  `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`    // 命令唯一ID
	Method        string                 `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`   // 执行动作
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"` // 附加数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerCommand) Reset() {
	*x = ServerCommand{}
	mi := &file_signaling_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCommand) ProtoMessage() {}

func (x *ServerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCommand.ProtoReflect.Descriptor instead.
func (*ServerCommand) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{1}
}

func (x *ServerCommand) GetMsgID() int64 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *ServerCommand) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ServerCommand) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ClientRegister struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`       // 客户端唯一标识
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                         // 客户端版本
	DeviceType    string                 `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"` // 设备类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientRegister) Reset() {
	*x = ClientRegister{}
	mi := &file_signaling_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegister) ProtoMessage() {}

func (x *ClientRegister) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegister.ProtoReflect.Descriptor instead.
func (*ClientRegister) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{2}
}

func (x *ClientRegister) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientRegister) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClientRegister) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

type CommandResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgID         int64                  `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandResult) Reset() {
	*x = CommandResult{}
	mi := &file_signaling_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResult) ProtoMessage() {}

func (x *CommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResult.ProtoReflect.Descriptor instead.
func (*CommandResult) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{3}
}

func (x *CommandResult) GetMsgID() int64 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *CommandResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommandResult) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Heartbeat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_signaling_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{4}
}

func (x *Heartbeat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type IpcEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`         // 客户端唯一标识
	IpcId         string                 `protobuf:"bytes,2,opt,name=ipc_id,json=ipcId,proto3" json:"ipc_id,omitempty"`                  // IPC 唯一标识
	Event         string                 `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`                               // 事件类型
	ChannelId     string                 `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`      // 通道ID
	IpcName       string                 `protobuf:"bytes,5,opt,name=ipc_name,json=ipcName,proto3" json:"ipc_name,omitempty"`            // IPC 名称
	Manufacturer  string                 `protobuf:"bytes,6,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`                 // IPC 厂商
	Transport     string                 `protobuf:"bytes,7,opt,name=transport,proto3" json:"transport,omitempty"`                       // 信令传输协议
	Streamtype    string                 `protobuf:"bytes,8,opt,name=streamtype,proto3" json:"streamtype,omitempty"`                     // 流传输模式
	Status        string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                             // IPC 状态
	ActiveTime    int64                  `protobuf:"varint,10,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"` // IPC 活跃时间
	IpcIp         string                 `protobuf:"bytes,11,opt,name=ipc_ip,json=ipcIp,proto3" json:"ipc_ip,omitempty"`                 // IPC IP
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpcEventRequest) Reset() {
	*x = IpcEventRequest{}
	mi := &file_signaling_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpcEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpcEventRequest) ProtoMessage() {}

func (x *IpcEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpcEventRequest.ProtoReflect.Descriptor instead.
func (*IpcEventRequest) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{5}
}

func (x *IpcEventRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *IpcEventRequest) GetIpcId() string {
	if x != nil {
		return x.IpcId
	}
	return ""
}

func (x *IpcEventRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *IpcEventRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *IpcEventRequest) GetIpcName() string {
	if x != nil {
		return x.IpcName
	}
	return ""
}

func (x *IpcEventRequest) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *IpcEventRequest) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *IpcEventRequest) GetStreamtype() string {
	if x != nil {
		return x.Streamtype
	}
	return ""
}

func (x *IpcEventRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IpcEventRequest) GetActiveTime() int64 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

func (x *IpcEventRequest) GetIpcIp() string {
	if x != nil {
		return x.IpcIp
	}
	return ""
}

type IpcEventAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 处理结果是否成功
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`          // 服务端的反馈信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpcEventAck) Reset() {
	*x = IpcEventAck{}
	mi := &file_signaling_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpcEventAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpcEventAck) ProtoMessage() {}

func (x *IpcEventAck) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpcEventAck.ProtoReflect.Descriptor instead.
func (*IpcEventAck) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{6}
}

func (x *IpcEventAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IpcEventAck) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type IpcInviteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	IpcId         string                 `protobuf:"bytes,2,opt,name=ipc_id,json=ipcId,proto3" json:"ipc_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpcInviteRequest) Reset() {
	*x = IpcInviteRequest{}
	mi := &file_signaling_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpcInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpcInviteRequest) ProtoMessage() {}

func (x *IpcInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpcInviteRequest.ProtoReflect.Descriptor instead.
func (*IpcInviteRequest) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{7}
}

func (x *IpcInviteRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *IpcInviteRequest) GetIpcId() string {
	if x != nil {
		return x.IpcId
	}
	return ""
}

type IpcInviteAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ZlmIp         string                 `protobuf:"bytes,2,opt,name=zlm_ip,json=zlmIp,proto3" json:"zlm_ip,omitempty"`
	ZlmPort       int64                  `protobuf:"varint,3,opt,name=zlm_port,json=zlmPort,proto3" json:"zlm_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpcInviteAck) Reset() {
	*x = IpcInviteAck{}
	mi := &file_signaling_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpcInviteAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpcInviteAck) ProtoMessage() {}

func (x *IpcInviteAck) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpcInviteAck.ProtoReflect.Descriptor instead.
func (*IpcInviteAck) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{8}
}

func (x *IpcInviteAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IpcInviteAck) GetZlmIp() string {
	if x != nil {
		return x.ZlmIp
	}
	return ""
}

func (x *IpcInviteAck) GetZlmPort() int64 {
	if x != nil {
		return x.ZlmPort
	}
	return 0
}

type AIEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       int64                  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	StreamId      string                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ClientId      string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClassName     string                 `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	MaxScore      float64                `protobuf:"fixed64,5,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Count         int64                  `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	DeviceId      string                 `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	RkPlatform    string                 `protobuf:"bytes,8,opt,name=rk_platform,json=rkPlatform,proto3" json:"rk_platform,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIEventRequest) Reset() {
	*x = AIEventRequest{}
	mi := &file_signaling_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIEventRequest) ProtoMessage() {}

func (x *AIEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIEventRequest.ProtoReflect.Descriptor instead.
func (*AIEventRequest) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{9}
}

func (x *AIEventRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AIEventRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *AIEventRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AIEventRequest) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *AIEventRequest) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *AIEventRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AIEventRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AIEventRequest) GetRkPlatform() string {
	if x != nil {
		return x.RkPlatform
	}
	return ""
}

type AIEventAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIEventAck) Reset() {
	*x = AIEventAck{}
	mi := &file_signaling_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIEventAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIEventAck) ProtoMessage() {}

func (x *AIEventAck) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIEventAck.ProtoReflect.Descriptor instead.
func (*AIEventAck) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{10}
}

func (x *AIEventAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AIEventAck) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type OTAUpgradeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DeviceId        string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FirmwareId      string                 `protobuf:"bytes,2,opt,name=firmware_id,json=firmwareId,proto3" json:"firmware_id,omitempty"`
	FirmwareVersion string                 `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	UpgradeComplete string                 `protobuf:"bytes,4,opt,name=upgrade_complete,json=upgradeComplete,proto3" json:"upgrade_complete,omitempty"`
	UpgradeProgress string                 `protobuf:"bytes,5,opt,name=upgrade_progress,json=upgradeProgress,proto3" json:"upgrade_progress,omitempty"`
	UpgradeError    string                 `protobuf:"bytes,6,opt,name=upgrade_error,json=upgradeError,proto3" json:"upgrade_error,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OTAUpgradeRequest) Reset() {
	*x = OTAUpgradeRequest{}
	mi := &file_signaling_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OTAUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAUpgradeRequest) ProtoMessage() {}

func (x *OTAUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAUpgradeRequest.ProtoReflect.Descriptor instead.
func (*OTAUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{11}
}

func (x *OTAUpgradeRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *OTAUpgradeRequest) GetFirmwareId() string {
	if x != nil {
		return x.FirmwareId
	}
	return ""
}

func (x *OTAUpgradeRequest) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *OTAUpgradeRequest) GetUpgradeComplete() string {
	if x != nil {
		return x.UpgradeComplete
	}
	return ""
}

func (x *OTAUpgradeRequest) GetUpgradeProgress() string {
	if x != nil {
		return x.UpgradeProgress
	}
	return ""
}

func (x *OTAUpgradeRequest) GetUpgradeError() string {
	if x != nil {
		return x.UpgradeError
	}
	return ""
}

type OTAUpgradeAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OTAUpgradeAck) Reset() {
	*x = OTAUpgradeAck{}
	mi := &file_signaling_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OTAUpgradeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAUpgradeAck) ProtoMessage() {}

func (x *OTAUpgradeAck) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAUpgradeAck.ProtoReflect.Descriptor instead.
func (*OTAUpgradeAck) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{12}
}

func (x *OTAUpgradeAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *OTAUpgradeAck) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_signaling_proto protoreflect.FileDescriptor

const file_signaling_proto_rawDesc = "" +
	"\n" +
	"\x0fsignaling.proto\x12\tsignaling\"\xbd\x01\n" +
	"\rClientMessage\x127\n" +
	"\bregister\x18\x01 \x01(\v2\x19.signaling.ClientRegisterH\x00R\bregister\x122\n" +
	"\x06result\x18\x02 \x01(\v2\x18.signaling.CommandResultH\x00R\x06result\x124\n" +
	"\theartbeat\x18\x03 \x01(\v2\x14.signaling.HeartbeatH\x00R\theartbeatB\t\n" +
	"\acontent\"W\n" +
	"\rServerCommand\x12\x14\n" +
	"\x05MsgID\x18\x01 \x01(\x03R\x05MsgID\x12\x16\n" +
	"\x06Method\x18\x02 \x01(\tR\x06Method\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\"h\n" +
	"\x0eClientRegister\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1f\n" +
	"\vdevice_type\x18\x03 \x01(\tR\n" +
	"deviceType\"Y\n" +
	"\rCommandResult\x12\x14\n" +
	"\x05MsgID\x18\x01 \x01(\x03R\x05MsgID\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\")\n" +
	"\tHeartbeat\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\"\xc7\x02\n" +
	"\x0fIpcEventRequest\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x15\n" +
	"\x06ipc_id\x18\x02 \x01(\tR\x05ipcId\x12\x14\n" +
	"\x05event\x18\x03 \x01(\tR\x05event\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x04 \x01(\tR\tchannelId\x12\x19\n" +
	"\bipc_name\x18\x05 \x01(\tR\aipcName\x12\"\n" +
	"\fmanufacturer\x18\x06 \x01(\tR\fmanufacturer\x12\x1c\n" +
	"\ttransport\x18\a \x01(\tR\ttransport\x12\x1e\n" +
	"\n" +
	"streamtype\x18\b \x01(\tR\n" +
	"streamtype\x12\x16\n" +
	"\x06status\x18\t \x01(\tR\x06status\x12\x1f\n" +
	"\vactive_time\x18\n" +
	" \x01(\x03R\n" +
	"activeTime\x12\x15\n" +
	"\x06ipc_ip\x18\v \x01(\tR\x05ipcIp\"9\n" +
	"\vIpcEventAck\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"F\n" +
	"\x10IpcInviteRequest\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x15\n" +
	"\x06ipc_id\x18\x02 \x01(\tR\x05ipcId\"Z\n" +
	"\fIpcInviteAck\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x15\n" +
	"\x06zlm_ip\x18\x02 \x01(\tR\x05zlmIp\x12\x19\n" +
	"\bzlm_port\x18\x03 \x01(\x03R\azlmPort\"\xf5\x01\n" +
	"\x0eAIEventRequest\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x03R\aeventId\x12\x1b\n" +
	"\tstream_id\x18\x02 \x01(\tR\bstreamId\x12\x1b\n" +
	"\tclient_id\x18\x03 \x01(\tR\bclientId\x12\x1d\n" +
	"\n" +
	"class_name\x18\x04 \x01(\tR\tclassName\x12\x1b\n" +
	"\tmax_score\x18\x05 \x01(\x01R\bmaxScore\x12\x14\n" +
	"\x05count\x18\x06 \x01(\x03R\x05count\x12\x1b\n" +
	"\tdevice_id\x18\a \x01(\tR\bdeviceId\x12\x1f\n" +
	"\vrk_platform\x18\b \x01(\tR\n" +
	"rkPlatform\"8\n" +
	"\n" +
	"AIEventAck\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"\xf7\x01\n" +
	"\x11OTAUpgradeRequest\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12\x1f\n" +
	"\vfirmware_id\x18\x02 \x01(\tR\n" +
	"firmwareId\x12)\n" +
	"\x10firmware_version\x18\x03 \x01(\tR\x0ffirmwareVersion\x12)\n" +
	"\x10upgrade_complete\x18\x04 \x01(\tR\x0fupgradeComplete\x12)\n" +
	"\x10upgrade_progress\x18\x05 \x01(\tR\x0fupgradeProgress\x12#\n" +
	"\rupgrade_error\x18\x06 \x01(\tR\fupgradeError\";\n" +
	"\rOTAUpgradeAck\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg2\xe9\x02\n" +
	"\n" +
	"SipService\x12I\n" +
	"\rStreamChannel\x12\x18.signaling.ClientMessage\x1a\x18.signaling.ServerCommand\"\x00(\x010\x01\x12A\n" +
	"\vIpcEventReq\x12\x1a.signaling.IpcEventRequest\x1a\x16.signaling.IpcEventAck\x12D\n" +
	"\fIpcInviteReq\x12\x1b.signaling.IpcInviteRequest\x1a\x17.signaling.IpcInviteAck\x12>\n" +
	"\n" +
	"AiEventReq\x12\x19.signaling.AIEventRequest\x1a\x15.signaling.AIEventAck\x12G\n" +
	"\rOTAUpgradeReq\x12\x1c.signaling.OTAUpgradeRequest\x1a\x18.signaling.OTAUpgradeAckB\rZ\v./signalingb\x06proto3"

var (
	file_signaling_proto_rawDescOnce sync.Once
	file_signaling_proto_rawDescData []byte
)

func file_signaling_proto_rawDescGZIP() []byte {
	file_signaling_proto_rawDescOnce.Do(func() {
		file_signaling_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_signaling_proto_rawDesc), len(file_signaling_proto_rawDesc)))
	})
	return file_signaling_proto_rawDescData
}

var file_signaling_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_signaling_proto_goTypes = []any{
	(*ClientMessage)(nil),     // 0: signaling.ClientMessage
	(*ServerCommand)(nil),     // 1: signaling.ServerCommand
	(*ClientRegister)(nil),    // 2: signaling.ClientRegister
	(*CommandResult)(nil),     // 3: signaling.CommandResult
	(*Heartbeat)(nil),         // 4: signaling.Heartbeat
	(*IpcEventRequest)(nil),   // 5: signaling.IpcEventRequest
	(*IpcEventAck)(nil),       // 6: signaling.IpcEventAck
	(*IpcInviteRequest)(nil),  // 7: signaling.IpcInviteRequest
	(*IpcInviteAck)(nil),      // 8: signaling.IpcInviteAck
	(*AIEventRequest)(nil),    // 9: signaling.AIEventRequest
	(*AIEventAck)(nil),        // 10: signaling.AIEventAck
	(*OTAUpgradeRequest)(nil), // 11: signaling.OTAUpgradeRequest
	(*OTAUpgradeAck)(nil),     // 12: signaling.OTAUpgradeAck
}
var file_signaling_proto_depIdxs = []int32{
	2,  // 0: signaling.ClientMessage.register:type_name -> signaling.ClientRegister
	3,  // 1: signaling.ClientMessage.result:type_name -> signaling.CommandResult
	4,  // 2: signaling.ClientMessage.heartbeat:type_name -> signaling.Heartbeat
	0,  // 3: signaling.SipService.StreamChannel:input_type -> signaling.ClientMessage
	5,  // 4: signaling.SipService.IpcEventReq:input_type -> signaling.IpcEventRequest
	7,  // 5: signaling.SipService.IpcInviteReq:input_type -> signaling.IpcInviteRequest
	9,  // 6: signaling.SipService.AiEventReq:input_type -> signaling.AIEventRequest
	11, // 7: signaling.SipService.OTAUpgradeReq:input_type -> signaling.OTAUpgradeRequest
	1,  // 8: signaling.SipService.StreamChannel:output_type -> signaling.ServerCommand
	6,  // 9: signaling.SipService.IpcEventReq:output_type -> signaling.IpcEventAck
	8,  // 10: signaling.SipService.IpcInviteReq:output_type -> signaling.IpcInviteAck
	10, // 11: signaling.SipService.AiEventReq:output_type -> signaling.AIEventAck
	12, // 12: signaling.SipService.OTAUpgradeReq:output_type -> signaling.OTAUpgradeAck
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_signaling_proto_init() }
func file_signaling_proto_init() {
	if File_signaling_proto != nil {
		return
	}
	file_signaling_proto_msgTypes[0].OneofWrappers = []any{
		(*ClientMessage_Register)(nil),
		(*ClientMessage_Result)(nil),
		(*ClientMessage_Heartbeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_signaling_proto_rawDesc), len(file_signaling_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_signaling_proto_goTypes,
		DependencyIndexes: file_signaling_proto_depIdxs,
		MessageInfos:      file_signaling_proto_msgTypes,
	}.Build()
	File_signaling_proto = out.File
	file_signaling_proto_goTypes = nil
	file_signaling_proto_depIdxs = nil
}
